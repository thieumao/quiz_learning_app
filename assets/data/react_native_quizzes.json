{
  "category": "React Native",
  "quizzes": [
    {
      "id": "rn_beginner_1",
      "title": "React Native Basics",
      "description": "Test your knowledge of React Native fundamentals",
      "difficulty": "Beginner",
      "questions": [
        {
          "id": "rnb1-1",
          "questionText": "What is React Native?",
          "options": [
            "A JavaScript library for building user interfaces",
            "A framework for building native mobile apps using React",
            "A database management system",
            "A programming language"
          ],
          "correctAnswerIndex": 1,
          "explanation": "React Native is a framework that allows you to build native mobile applications using React and JavaScript."
        },
        {
          "id": "rnb1-2",
          "questionText": "Which command is used to create a new React Native project?",
          "options": [
            "create-react-native-app",
            "npx react-native init",
            "npm create-react-native",
            "yarn create-react-native"
          ],
          "correctAnswerIndex": 1,
          "explanation": "npx react-native init is the standard command to create a new React Native project."
        },
        {
          "id": "rnb1-3",
          "questionText": "What is the basic building block of a React Native UI?",
          "options": [
            "Component",
            "Element",
            "View",
            "Screen"
          ],
          "correctAnswerIndex": 0,
          "explanation": "Components are the basic building blocks of React Native UI. They can be functional or class-based."
        },
        {
          "id": "rnb1-4",
          "questionText": "Which component is used to create a scrollable list in React Native?",
          "options": [
            "ScrollView",
            "ListView",
            "FlatList",
            "SectionList"
          ],
          "correctAnswerIndex": 2,
          "explanation": "FlatList is the recommended component for creating scrollable lists in React Native as it has better performance than ScrollView."
        },
        {
          "id": "rnb1-5",
          "questionText": "What is a Component in React Native?",
          "options": [
            "A database element",
            "A reusable piece of UI code",
            "A networking element",
            "A testing element"
          ],
          "correctAnswerIndex": 1,
          "explanation": "A Component is a reusable piece of UI code that can be composed to build complex user interfaces."
        },
        {
          "id": "rnb1-6",
          "questionText": "What is JSX in React Native?",
          "options": [
            "A database syntax",
            "A syntax extension for JavaScript",
            "A networking syntax",
            "A testing syntax"
          ],
          "correctAnswerIndex": 1,
          "explanation": "JSX is a syntax extension for JavaScript that lets you write HTML-like code in your JavaScript files."
        },
        {
          "id": "rnb1-7",
          "questionText": "What is Props in React Native?",
          "options": [
            "A database feature",
            "A way to pass data between components",
            "A networking feature",
            "A testing feature"
          ],
          "correctAnswerIndex": 1,
          "explanation": "Props (Properties) are a way to pass data from parent to child components in React Native."
        },
        {
          "id": "rnb1-8",
          "questionText": "What is State in React Native?",
          "options": [
            "A database feature",
            "A way to manage component data",
            "A networking feature",
            "A testing feature"
          ],
          "correctAnswerIndex": 1,
          "explanation": "State is a way to manage data that can change over time within a component."
        },
        {
          "id": "rnb1-9",
          "questionText": "What is a Hook in React Native?",
          "options": [
            "A database feature",
            "A way to use state and other React features",
            "A networking feature",
            "A testing feature"
          ],
          "correctAnswerIndex": 1,
          "explanation": "Hooks are functions that let you use state and other React features in functional components."
        },
        {
          "id": "rnb1-10",
          "questionText": "What is useEffect in React Native?",
          "options": [
            "A database hook",
            "A hook for handling side effects",
            "A networking hook",
            "A testing hook"
          ],
          "correctAnswerIndex": 1,
          "explanation": "useEffect is a hook that lets you perform side effects in functional components, such as data fetching or subscriptions."
        },
        {
          "id": "rnb1-11",
          "questionText": "What is a StyleSheet in React Native?",
          "options": [
            "A database component",
            "A component for defining styles",
            "A networking component",
            "A testing component"
          ],
          "correctAnswerIndex": 1,
          "explanation": "StyleSheet is a component that provides a way to define styles in React Native, similar to CSS but optimized for mobile."
        },
        {
          "id": "rnb1-12",
          "questionText": "What is a TouchableOpacity in React Native?",
          "options": [
            "A database component",
            "A component that responds to touch with opacity feedback",
            "A networking component",
            "A testing component"
          ],
          "correctAnswerIndex": 1,
          "explanation": "TouchableOpacity is a component that responds to touch with opacity feedback, commonly used for buttons."
        },
        {
          "id": "rnb1-13",
          "questionText": "What is a TextInput in React Native?",
          "options": [
            "A database component",
            "A component for text input",
            "A networking component",
            "A testing component"
          ],
          "correctAnswerIndex": 1,
          "explanation": "TextInput is a component that allows users to enter text, similar to an input field in web development."
        },
        {
          "id": "rnb1-14",
          "questionText": "What is a ScrollView in React Native?",
          "options": [
            "A database component",
            "A component for scrollable content",
            "A networking component",
            "A testing component"
          ],
          "correctAnswerIndex": 1,
          "explanation": "ScrollView is a component that provides a scrollable container for content that might not fit on the screen."
        },
        {
          "id": "rnb1-15",
          "questionText": "What is a View in React Native?",
          "options": [
            "A database component",
            "A basic building block for UI components",
            "A networking component",
            "A testing component"
          ],
          "correctAnswerIndex": 1,
          "explanation": "View is a basic building block for UI components, similar to a div in web development."
        }
      ]
    },
    {
      "id": "rn_intermediate_1",
      "title": "React Native Intermediate",
      "description": "Intermediate concepts in React Native development",
      "difficulty": "Intermediate",
      "questions": [
        {
          "id": "rni1-1",
          "questionText": "What is the difference between ScrollView and FlatList?",
          "options": [
            "ScrollView is faster than FlatList",
            "FlatList is more memory efficient for long lists",
            "ScrollView supports horizontal scrolling",
            "FlatList only works with images"
          ],
          "correctAnswerIndex": 1,
          "explanation": "FlatList is more memory efficient for long lists because it only renders items that are currently visible on screen."
        },
        {
          "id": "rni1-2",
          "questionText": "What is the purpose of useCallback hook?",
          "options": [
            "To handle API calls",
            "To memoize functions",
            "To manage state",
            "To handle navigation"
          ],
          "correctAnswerIndex": 1,
          "explanation": "useCallback is used to memoize functions, preventing unnecessary re-renders of child components that depend on these functions."
        },
        {
          "id": "rni1-3",
          "questionText": "What is the difference between useMemo and useCallback?",
          "options": [
            "useMemo is for values, useCallback is for functions",
            "useMemo is for functions, useCallback is for values",
            "They are exactly the same",
            "useMemo is deprecated"
          ],
          "correctAnswerIndex": 0,
          "explanation": "useMemo is used to memoize computed values, while useCallback is used to memoize functions."
        },
        {
          "id": "rni1-4",
          "questionText": "What is the purpose of React.memo?",
          "options": [
            "To create memoized components",
            "To handle API calls",
            "To manage state",
            "To handle navigation"
          ],
          "correctAnswerIndex": 0,
          "explanation": "React.memo is a higher-order component that memoizes a component, preventing re-renders if props haven't changed."
        },
        {
          "id": "rni1-5",
          "questionText": "What is the purpose of useRef?",
          "options": [
            "To manage state",
            "To create mutable references",
            "To handle API calls",
            "To handle navigation"
          ],
          "correctAnswerIndex": 1,
          "explanation": "useRef creates a mutable reference that persists across re-renders and can be used to access DOM elements or store mutable values."
        },
        {
          "id": "rni1-6",
          "questionText": "What is the purpose of useReducer?",
          "options": [
            "To handle API calls",
            "To manage complex state logic",
            "To handle navigation",
            "To create memoized values"
          ],
          "correctAnswerIndex": 1,
          "explanation": "useReducer is used to manage complex state logic, similar to Redux but for local component state."
        },
        {
          "id": "rni1-7",
          "questionText": "What is the purpose of useContext?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To access context values",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "useContext is used to access values from a React context, allowing components to consume context values without prop drilling."
        },
        {
          "id": "rni1-8",
          "questionText": "What is the purpose of useLayoutEffect?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To handle navigation",
            "To perform DOM measurements synchronously"
          ],
          "correctAnswerIndex": 3,
          "explanation": "useLayoutEffect is similar to useEffect but runs synchronously after DOM mutations, useful for DOM measurements."
        },
        {
          "id": "rni1-9",
          "questionText": "What is the purpose of useImperativeHandle?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To customize instance value exposed to parent components",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "useImperativeHandle customizes the instance value that is exposed to parent components when using ref."
        },
        {
          "id": "rni1-10",
          "questionText": "What is the purpose of useDebugValue?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To handle navigation",
            "To display custom hook labels in React DevTools"
          ],
          "correctAnswerIndex": 3,
          "explanation": "useDebugValue is used to display custom hook labels in React DevTools, helpful for debugging custom hooks."
        },
        {
          "id": "rni1-11",
          "questionText": "What is the purpose of useTransition?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To mark state updates as non-urgent",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "useTransition marks state updates as non-urgent, allowing other updates to interrupt them."
        },
        {
          "id": "rni1-12",
          "questionText": "What is the purpose of useDeferredValue?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To defer updating a value",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "useDeferredValue defers updating a value, allowing other updates to take precedence."
        },
        {
          "id": "rni1-13",
          "questionText": "What is the purpose of useId?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To generate unique IDs",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "useId generates unique IDs that are stable across server and client rendering."
        },
        {
          "id": "rni1-14",
          "questionText": "What is the purpose of useSyncExternalStore?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To subscribe to external data sources",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "useSyncExternalStore is used to subscribe to external data sources in a way that's compatible with concurrent rendering."
        },
        {
          "id": "rni1-15",
          "questionText": "What is the purpose of useInsertionEffect?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To handle navigation",
            "To inject styles into the DOM"
          ],
          "correctAnswerIndex": 3,
          "explanation": "useInsertionEffect is used to inject styles into the DOM before any DOM mutations."
        },
        {
          "id": "rni1-16",
          "questionText": "What is the purpose of useEvent?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To create stable event handlers",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "useEvent creates stable event handlers that don't cause unnecessary re-renders."
        },
        {
          "id": "rni1-17",
          "questionText": "What is the purpose of useMutableSource?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To subscribe to mutable sources",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "useMutableSource is used to subscribe to mutable sources in a way that's compatible with concurrent rendering."
        },
        {
          "id": "rni1-18",
          "questionText": "What is the purpose of useOpaqueIdentifier?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To generate stable identifiers",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "useOpaqueIdentifier generates stable identifiers that are unique across the entire app."
        },
        {
          "id": "rni1-19",
          "questionText": "What is the purpose of useSubscription?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To subscribe to data sources",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "useSubscription is used to subscribe to data sources in a way that's compatible with concurrent rendering."
        },
        {
          "id": "rni1-20",
          "questionText": "What is the purpose of useIsomorphicLayoutEffect?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To handle navigation",
            "To use useLayoutEffect in both client and server environments"
          ],
          "correctAnswerIndex": 3,
          "explanation": "useIsomorphicLayoutEffect is a version of useLayoutEffect that works in both client and server environments."
        }
      ]
    },
    {
      "id": "rn_advanced_1",
      "title": "React Native Advanced",
      "description": "Advanced concepts in React Native development",
      "difficulty": "Advanced",
      "questions": [
        {
          "id": "rna1-1",
          "questionText": "What is the purpose of the Hermes JavaScript engine?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To improve app performance",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "Hermes is a JavaScript engine optimized for React Native that improves app performance, reduces memory usage, and decreases app size."
        },
        {
          "id": "rna1-2",
          "questionText": "What is the purpose of the Flipper debugging tool?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To debug React Native apps",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "Flipper is a platform for debugging mobile apps that provides a suite of tools for inspecting and debugging React Native apps."
        },
        {
          "id": "rna1-3",
          "questionText": "What is the purpose of the React Native CLI?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To create and manage React Native projects",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "The React Native CLI is a command-line interface for creating and managing React Native projects, including building and running apps."
        },
        {
          "id": "rna1-4",
          "questionText": "What is the purpose of the React Native Debugger?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To debug React Native apps",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "The React Native Debugger is a standalone app for debugging React Native apps, providing a suite of tools for inspecting and debugging."
        },
        {
          "id": "rna1-5",
          "questionText": "What is the purpose of the React Native Performance Monitor?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To monitor app performance",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "The React Native Performance Monitor is a tool for monitoring app performance, providing insights into rendering, memory usage, and more."
        },
        {
          "id": "rna1-6",
          "questionText": "What is the purpose of the React Native Reanimated library?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To create smooth animations",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native Reanimated is a library for creating smooth animations in React Native, using a declarative API and running animations on the native thread."
        },
        {
          "id": "rna1-7",
          "questionText": "What is the purpose of the React Native Gesture Handler?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To handle touch gestures",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native Gesture Handler is a library for handling touch gestures in React Native, providing a declarative API and running gestures on the native thread."
        },
        {
          "id": "rna1-8",
          "questionText": "What is the purpose of the React Native Skia?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To create custom graphics",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native Skia is a library for creating custom graphics in React Native, using the Skia graphics engine."
        },
        {
          "id": "rna1-9",
          "questionText": "What is the purpose of the React Native Vision Camera?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To access the device camera",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native Vision Camera is a library for accessing the device camera in React Native, providing a declarative API and running camera operations on the native thread."
        },
        {
          "id": "rna1-10",
          "questionText": "What is the purpose of the React Native Maps?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To display maps",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native Maps is a library for displaying maps in React Native, providing a declarative API and running map operations on the native thread."
        },
        {
          "id": "rna1-11",
          "questionText": "What is the purpose of the React Native Firebase?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To integrate Firebase services",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native Firebase is a library for integrating Firebase services into React Native apps, providing a declarative API and running Firebase operations on the native thread."
        },
        {
          "id": "rna1-12",
          "questionText": "What is the purpose of the React Native Async Storage?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To store data locally",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native Async Storage is a library for storing data locally in React Native apps, providing a simple API for key-value storage."
        },
        {
          "id": "rna1-13",
          "questionText": "What is the purpose of the React Native SQLite?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To store data in a SQLite database",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native SQLite is a library for storing data in a SQLite database in React Native apps, providing a simple API for database operations."
        },
        {
          "id": "rna1-14",
          "questionText": "What is the purpose of the React Native Realm?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To store data in a Realm database",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native Realm is a library for storing data in a Realm database in React Native apps, providing a simple API for database operations."
        },
        {
          "id": "rna1-15",
          "questionText": "What is the purpose of the React Native WatermelonDB?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To store data in a WatermelonDB database",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native WatermelonDB is a library for storing data in a WatermelonDB database in React Native apps, providing a simple API for database operations."
        },
        {
          "id": "rna1-16",
          "questionText": "What is the purpose of the React Native Redux?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To manage app state",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native Redux is a library for managing app state in React Native apps, providing a predictable state container."
        },
        {
          "id": "rna1-17",
          "questionText": "What is the purpose of the React Native MobX?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To manage app state",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native MobX is a library for managing app state in React Native apps, providing a simple and scalable state management solution."
        },
        {
          "id": "rna1-18",
          "questionText": "What is the purpose of the React Native Zustand?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To manage app state",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native Zustand is a library for managing app state in React Native apps, providing a simple and lightweight state management solution."
        },
        {
          "id": "rna1-19",
          "questionText": "What is the purpose of the React Native Jotai?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To manage app state",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native Jotai is a library for managing app state in React Native apps, providing a simple and atomic state management solution."
        },
        {
          "id": "rna1-20",
          "questionText": "What is the purpose of the React Native Recoil?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To manage app state",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native Recoil is a library for managing app state in React Native apps, providing a simple and experimental state management solution."
        },
        {
          "id": "rna1-21",
          "questionText": "What is the purpose of the React Native Apollo Client?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To manage GraphQL data",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native Apollo Client is a library for managing GraphQL data in React Native apps, providing a simple and powerful data management solution."
        },
        {
          "id": "rna1-22",
          "questionText": "What is the purpose of the React Native Relay?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To manage GraphQL data",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native Relay is a library for managing GraphQL data in React Native apps, providing a simple and powerful data management solution."
        },
        {
          "id": "rna1-23",
          "questionText": "What is the purpose of the React Native URQL?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To manage GraphQL data",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native URQL is a library for managing GraphQL data in React Native apps, providing a simple and lightweight data management solution."
        },
        {
          "id": "rna1-24",
          "questionText": "What is the purpose of the React Native GraphQL Code Generator?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To generate TypeScript types from GraphQL schema",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native GraphQL Code Generator is a library for generating TypeScript types from GraphQL schema in React Native apps, providing a simple and powerful type generation solution."
        },
        {
          "id": "rna1-25",
          "questionText": "What is the purpose of the React Native GraphQL Request?",
          "options": [
            "To handle API calls",
            "To manage state",
            "To make GraphQL requests",
            "To handle navigation"
          ],
          "correctAnswerIndex": 2,
          "explanation": "React Native GraphQL Request is a library for making GraphQL requests in React Native apps, providing a simple and lightweight request solution."
        }
      ]
    }
  ]
} 